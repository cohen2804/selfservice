//generate protobuf:
// protoc --go_out=./generated --go_opt=paths=source_relative \
// --go-grpc_out=./generated --go-grpc_opt=paths=source_relative \
// grpcmain.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: selfservice.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SessionRecordsService_ListActions_FullMethodName  = "/selfservice.SessionRecordsService/ListActions"
	SessionRecordsService_GetActionLog_FullMethodName = "/selfservice.SessionRecordsService/GetActionLog"
)

// SessionRecordsServiceClient is the client API for SessionRecordsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionRecordsServiceClient interface {
	ListActions(ctx context.Context, in *ListActionsRq, opts ...grpc.CallOption) (*ListActionsRs, error)
	GetActionLog(ctx context.Context, in *GetActionLogRq, opts ...grpc.CallOption) (*GetActionLogRs, error)
}

type sessionRecordsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionRecordsServiceClient(cc grpc.ClientConnInterface) SessionRecordsServiceClient {
	return &sessionRecordsServiceClient{cc}
}

func (c *sessionRecordsServiceClient) ListActions(ctx context.Context, in *ListActionsRq, opts ...grpc.CallOption) (*ListActionsRs, error) {
	out := new(ListActionsRs)
	err := c.cc.Invoke(ctx, SessionRecordsService_ListActions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionRecordsServiceClient) GetActionLog(ctx context.Context, in *GetActionLogRq, opts ...grpc.CallOption) (*GetActionLogRs, error) {
	out := new(GetActionLogRs)
	err := c.cc.Invoke(ctx, SessionRecordsService_GetActionLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionRecordsServiceServer is the server API for SessionRecordsService service.
// All implementations must embed UnimplementedSessionRecordsServiceServer
// for forward compatibility
type SessionRecordsServiceServer interface {
	ListActions(context.Context, *ListActionsRq) (*ListActionsRs, error)
	GetActionLog(context.Context, *GetActionLogRq) (*GetActionLogRs, error)
	mustEmbedUnimplementedSessionRecordsServiceServer()
}

// UnimplementedSessionRecordsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSessionRecordsServiceServer struct {
}

func (UnimplementedSessionRecordsServiceServer) ListActions(context.Context, *ListActionsRq) (*ListActionsRs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActions not implemented")
}
func (UnimplementedSessionRecordsServiceServer) GetActionLog(context.Context, *GetActionLogRq) (*GetActionLogRs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActionLog not implemented")
}
func (UnimplementedSessionRecordsServiceServer) mustEmbedUnimplementedSessionRecordsServiceServer() {}

// UnsafeSessionRecordsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionRecordsServiceServer will
// result in compilation errors.
type UnsafeSessionRecordsServiceServer interface {
	mustEmbedUnimplementedSessionRecordsServiceServer()
}

func RegisterSessionRecordsServiceServer(s grpc.ServiceRegistrar, srv SessionRecordsServiceServer) {
	s.RegisterService(&SessionRecordsService_ServiceDesc, srv)
}

func _SessionRecordsService_ListActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActionsRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRecordsServiceServer).ListActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionRecordsService_ListActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRecordsServiceServer).ListActions(ctx, req.(*ListActionsRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionRecordsService_GetActionLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActionLogRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRecordsServiceServer).GetActionLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionRecordsService_GetActionLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRecordsServiceServer).GetActionLog(ctx, req.(*GetActionLogRq))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionRecordsService_ServiceDesc is the grpc.ServiceDesc for SessionRecordsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionRecordsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "selfservice.SessionRecordsService",
	HandlerType: (*SessionRecordsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListActions",
			Handler:    _SessionRecordsService_ListActions_Handler,
		},
		{
			MethodName: "GetActionLog",
			Handler:    _SessionRecordsService_GetActionLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "selfservice.proto",
}
